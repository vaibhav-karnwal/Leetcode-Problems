Method 1//////////////////////////////////////////////////////////////////////

class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
                swap(nums, i, j);
        }
        reverse(nums, i+1);
    }
    public void swap(int[] nums, int i, int j) {
        {
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }
    }
            
    public void reverse(int[] nums, int i) {
        int j=nums.length-1;
        while(i<j)
        {
            swap(nums, i ,j);
            i++;
            j--;
        }
    }
            
}

Method 2 ////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public void nextPermutation(int[] nums) {
        int k=nums.length-2;
        
        while(k>=0 && nums[k]>=nums[k+1]){
            k--;
        }
        
        if(k==-1){
            reverseArray(0,nums.length-1,nums);
            return;
        }
        for(int i=nums.length-1;i>k;i--){
            if(nums[i]>nums[k]){
                int temp=nums[i];
                nums[i]=nums[k];
                nums[k]=temp;
                break;
            }
        }
        reverseArray(k+1,nums.length-1,nums);
    }
        void reverseArray(int i,int j, int[] nums){
            while(i<j){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                i++;
                j--;
            }
        }
    
}
